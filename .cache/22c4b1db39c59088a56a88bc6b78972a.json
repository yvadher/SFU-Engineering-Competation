{"dependencies":[{"name":"../constants","loc":{"line":2,"column":161}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _constants = require(\"../constants\");\n\nclass train {\n  constructor(id, direction, speed, track) {\n    this.id = id;\n    this.direction = direction;\n    this.pos = { x: track.x, y: track.y };\n    this.acceleration = _constants.acceleration;\n    this.move = 1;\n    if (this.direction == 'W') {\n      this.leftTop = { x: this.pos.x, y: this.pos.y };\n      this.leftBottom = { x: this.pos.x, y: this.pos.y + _constants.trainWidth };\n      this.rightTop = { x: this.pos.x + _constants.trainLength, y: this.pos.y };\n      this.rightBottom = { x: this.pos.x + _constants.trainLength, y: this.pos.y + _constants.trainWidth };\n\n      this.outerRpos = { x: this.pos.x - _constants.outerR, y: this.pos.y + _constants.trainWidth / 2 };\n      this.innerRpos = { x: this.pos.x + _constants.innerR, y: this.pos.y + _constants.trainWidth / 2 };\n    } else if (this.direction == 'E') {\n      this.leftTop = { x: this.pos.x - _constants.trainWidth, y: this.pos.y };\n      this.leftBottom = { x: this.pos.x - _constants.trainWidth, y: this.pos.y + _constants.trainWidth };\n      this.rightTop = { x: this.pos.x, y: this.pos.y };\n      this.rightBottom = { x: this.pos.x, y: this.pos.y + _constants.trainWidth };\n\n      this.outerRpos = { x: this.pos.x + _constants.outerR, y: this.pos.y + _constants.trainWidth / 2 };\n      this.innerRpos = { x: this.pos.x - _constants.innerR, y: this.pos.y + _constants.trainWidth / 2 };\n    } else if (this.direction == 'S') {\n      this.leftTop = { x: this.pos.x, y: this.pos.y - _constants.trainLength };\n      this.leftBottom = { x: this.pos.x, y: this.pos.y };\n      this.rightTop = { x: this.pos.x + _constants.trainWidth, y: this.pos.y - _constants.trainLength };\n      this.rightBottom = { x: this.pos.x + _constants.trainWidth, y: this.pos.y };\n\n      this.outerRpos = { x: this.pos.x + _constants.trainWidth / 2, y: this.pos.y + _constants.outerR };\n      this.innerRpos = { x: this.pos.x + _constants.trainWidth / 2, y: this.pos.y - _constants.innerR };\n    } else if (this.direction == 'N') {\n      this.leftTop = { x: this.pos.x, y: this.pos.y };\n      this.leftBottom = { x: this.pos.x, y: this.pos.y + _constants.trainLength };\n      this.rightTop = { x: this.pos.x + _constants.trainWidth, y: this.pos.y };\n      this.rightBottom = { x: this.pos.x + _constants.trainWidth, y: this.pos.y + _constants.trainLength };\n\n      this.outerRpos = { x: this.pos.x + _constants.trainWidth / 2, y: this.pos.y - _constants.outerR };\n      this.innerRpos = { x: this.pos.x + _constants.trainWidth / 2, y: this.pos.y + _constants.innerR };\n    }\n\n    this.speed = speed;\n    this.track = track;\n  }\n\n  show() {\n    if (this.direction == 'E') {\n      p5.strokeWeight(1);\n      p5.fill(_constants.trainColor);\n      p5.rect(this.pos.x - _constants.trainLength, this.pos.y, _constants.trainLength, _constants.trainWidth, _constants.trainOuterRadius, _constants.trainOuterRadius, _constants.trainOuterRadius, _constants.trainOuterRadius);\n      for (let x = this.pos.x - _constants.trainLength + 40; x < this.pos.x; x += 40) {\n        p5.strokeWeight(2);\n        p5.stroke(_constants.trainCompartmentColor);\n        p5.line(x, this.pos.y, x, this.pos.y + _constants.trainWidth);\n      }\n    } else if (this.direction == 'W') {\n\n      p5.strokeWeight(1);\n      p5.fill(_constants.trainColor);\n      p5.rect(this.pos.x, this.pos.y, _constants.trainLength, _constants.trainWidth, _constants.trainOuterRadius, _constants.trainOuterRadius, _constants.trainOuterRadius, _constants.trainOuterRadius);\n      for (let x = this.pos.x + 40; x < this.pos.x + _constants.trainLength; x += 40) {\n        p5.strokeWeight(2);\n        p5.stroke(_constants.trainCompartmentColor);\n        p5.line(x, this.pos.y, x, this.pos.y + _constants.trainWidth);\n      }\n    } else if (this.direction == 'N') {\n      p5.strokeWeight(1);\n      p5.fill(_constants.trainColor);\n      p5.rect(this.pos.x, this.pos.y, _constants.trainWidth, _constants.trainLength, _constants.trainOuterRadius, _constants.trainOuterRadius, _constants.trainOuterRadius, _constants.trainOuterRadius);\n      for (let y = this.pos.y + 40; y < this.pos.y + _constants.trainLength; y += 40) {\n        p5.strokeWeight(2);\n        p5.stroke(_constants.trainCompartmentColor);\n        p5.line(this.pos.x, y, this.pos.x + _constants.trainWidth, y);\n      }\n    } else if (this.direction == 'S') {\n      p5.strokeWeight(1);\n      p5.fill(_constants.trainColor);\n      p5.rect(this.pos.x, this.pos.y - _constants.trainLength, _constants.trainWidth, _constants.trainLength, _constants.trainOuterRadius, _constants.trainOuterRadius, _constants.trainOuterRadius, _constants.trainOuterRadius);\n      for (let y = this.pos.y - _constants.trainLength + 40; y < this.pos.y; y += 40) {\n        p5.strokeWeight(2);\n        p5.stroke(_constants.trainCompartmentColor);\n        p5.line(this.pos.x, y, this.pos.x + _constants.trainWidth, y);\n      }\n    }\n  }\n\n  update(Trains) {\n    this.updateCordinate();\n    if (this.direction == 'E') {\n      var stop = false;\n      for (let i = 0; i < Trains.length; i++) {\n        var other = Trains[i];\n        //Dont check with self\n        if (this.id == other.id) {\n          continue;\n        }\n        if (other.direction == 'N' || other.direction == 'S') {\n          var dist = p5.dist(this.outerRpos.x, this.outerRpos.y, other.innerRpos.x, other.innerRpos.y);\n          if (dist < _constants.collisionThresold) stop = true;\n        } else {\n          if (other.pos.y == this.pos.y) {\n            if (p5.dist(this.outerRpos.x, this.outerRpos.y, other.innerRpos.x, other.innerRpos.y) < _constants.collisionThresold) {\n              stop = true;\n            }\n          }\n        }\n      }\n      if (stop) {\n        this.move -= this.move * _constants.trainDeaccelerate;\n        if (this.move <= 0) {\n          this.move = 0;\n        }\n      } else {\n        if (this.move >= this.speed) {\n          this.move = this.speed;\n        } else {\n          this.move += this.move * _constants.acceleration;\n        }\n      }\n      this.pos.x += this.move;\n    } else if (this.direction == 'W') {\n      var stop = false;\n      for (let i = 0; i < Trains.length; i++) {\n        var other = Trains[i];\n        //Dont check with self\n        if (this.id == other.id) {\n          continue;\n        }\n        if (other.direction == 'N' || other.direction == 'S') {\n          var dist = p5.dist(this.outerRpos.x, this.outerRpos.y, other.innerRpos.x, other.innerRpos.y);\n          if (dist < _constants.collisionThresold) stop = true;\n        } else {\n          if (other.pos.y == this.pos.y) {\n            if (p5.dist(this.outerRpos.x, this.outerRpos.y, other.innerRpos.x, other.innerRpos.y) < _constants.collisionThresold) {\n              stop = true;\n            }\n          }\n        }\n      }\n      if (stop) {\n        this.move -= this.move * _constants.trainDeaccelerate;\n        if (this.move <= 0) {\n          this.move = 0;\n        }\n      } else {\n        if (this.move >= this.speed) {\n          this.move = this.speed;\n        } else {\n          this.move += this.move * _constants.acceleration;\n        }\n      }\n      this.pos.x -= this.move;\n    } else if (this.direction == 'N') {\n\n      var stop = false;\n      for (let i = 0; i < Trains.length; i++) {\n        var other = Trains[i];\n        //Dont check with self\n        if (this.id == other.id) {\n          continue;\n        }\n        if (other.direction == 'E' || other.direction == 'W') {\n          var dist = p5.dist(this.outerRpos.x, this.outerRpos.y, other.innerRpos.x, other.innerRpos.y);\n          if (dist < _constants.collisionThresold) stop = true;\n        } else {\n          if (other.pos.x == this.pos.x) {\n            if (p5.dist(this.outerRpos.x, this.outerRpos.y, other.innerRpos.x, other.innerRpos.y) < _constants.collisionThresold) {\n              stop = true;\n            }\n          }\n        }\n      }\n      if (stop) {\n        this.move -= this.move * _constants.trainDeaccelerate;\n        if (this.move <= 0) {\n          this.move = 0;\n        }\n      } else {\n        if (this.move >= this.speed) {\n          this.move = this.speed;\n        } else {\n          this.move += this.move * _constants.acceleration;\n        }\n      }\n      this.pos.y -= this.move;\n    } else if (this.direction == 'S') {\n      var stop = false;\n      for (let i = 0; i < Trains.length; i++) {\n        var other = Trains[i];\n        //Dont check with self\n        if (this.id == other.id) {\n          continue;\n        }\n        if (other.direction == 'E' || other.direction == 'W') {\n          var dist = p5.dist(this.outerRpos.x, this.outerRpos.y, other.innerRpos.x, other.innerRpos.y);\n          if (dist < _constants.collisionThresold) stop = true;\n        } else {\n          if (other.pos.x == this.pos.x) {\n            if (p5.dist(this.outerRpos.x, this.outerRpos.y, other.innerRpos.x, other.innerRpos.y) < _constants.collisionThresold) {\n              stop = true;\n            }\n          }\n        }\n      }\n      if (stop) {\n        this.move -= this.move * _constants.trainDeaccelerate;\n        if (this.move <= 0) {\n          this.move = 0;\n        }\n      } else {\n        if (this.move >= this.speed) {\n          this.move = this.speed;\n        } else {\n          this.move += this.move * _constants.acceleration;\n        }\n      }\n\n      this.pos.y += this.move;\n    }\n  }\n\n  updateCordinate() {\n    if (this.direction == 'W') {\n      this.leftTop = { x: this.pos.x, y: this.pos.y };\n      this.leftBottom = { x: this.pos.x, y: this.pos.y + _constants.trainWidth };\n      this.rightTop = { x: this.pos.x + _constants.trainLength, y: this.pos.y };\n      this.rightBottom = { x: this.pos.x + _constants.trainLength, y: this.pos.y + _constants.trainWidth };\n\n      this.outerRpos = { x: this.pos.x - _constants.outerR, y: this.pos.y + _constants.trainWidth / 2 };\n      this.innerRpos = { x: this.pos.x + _constants.innerR, y: this.pos.y + _constants.trainWidth / 2 };\n    } else if (this.direction == 'E') {\n      this.leftTop = { x: this.pos.x - _constants.trainWidth, y: this.pos.y };\n      this.leftBottom = { x: this.pos.x - _constants.trainWidth, y: this.pos.y + _constants.trainWidth };\n      this.rightTop = { x: this.pos.x, y: this.pos.y };\n      this.rightBottom = { x: this.pos.x, y: this.pos.y + _constants.trainWidth };\n\n      this.outerRpos = { x: this.pos.x + _constants.outerR, y: this.pos.y + _constants.trainWidth / 2 };\n      this.innerRpos = { x: this.pos.x - _constants.innerR, y: this.pos.y + _constants.trainWidth / 2 };\n    } else if (this.direction == 'S') {\n      this.leftTop = { x: this.pos.x, y: this.pos.y - _constants.trainLength };\n      this.leftBottom = { x: this.pos.x, y: this.pos.y };\n      this.rightTop = { x: this.pos.x + _constants.trainWidth, y: this.pos.y - _constants.trainLength };\n      this.rightBottom = { x: this.pos.x + _constants.trainWidth, y: this.pos.y };\n\n      this.outerRpos = { x: this.pos.x + _constants.trainWidth / 2, y: this.pos.y + _constants.outerR };\n      this.innerRpos = { x: this.pos.x + _constants.trainWidth / 2, y: this.pos.y - _constants.innerR };\n    } else if (this.direction == 'N') {\n      this.leftTop = { x: this.pos.x, y: this.pos.y };\n      this.leftBottom = { x: this.pos.x, y: this.pos.y + _constants.trainLength };\n      this.rightTop = { x: this.pos.x + _constants.trainWidth, y: this.pos.y };\n      this.rightBottom = { x: this.pos.x + _constants.trainWidth, y: this.pos.y + _constants.trainLength };\n\n      this.outerRpos = { x: this.pos.x + _constants.trainWidth / 2, y: this.pos.y - _constants.outerR };\n      this.innerRpos = { x: this.pos.x + _constants.trainWidth / 2, y: this.pos.y + _constants.innerR };\n    }\n  }\n}\nexports.default = train;"},"hash":"e5e98876b5d3ef0f126f7f03fb671bff"}
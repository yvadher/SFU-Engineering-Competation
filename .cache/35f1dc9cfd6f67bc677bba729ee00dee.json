{"dependencies":[{"name":"../utils/scrollbarFix","loc":{"line":1,"column":30}},{"name":"../utils/iosFix","loc":{"line":2,"column":27}},{"name":"../utils/ieFix","loc":{"line":3,"column":26}},{"name":"../utils/aria","loc":{"line":4,"column":32}},{"name":"../utils/dom/index","loc":{"line":5,"column":21}},{"name":"../utils/classes.js","loc":{"line":6,"column":28}},{"name":"../globalState","loc":{"line":7,"column":50}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.closeToast = exports.closeModal = exports.closePopup = exports.close = undefined;\n\nvar _scrollbarFix = require(\"../utils/scrollbarFix\");\n\nvar _iosFix = require(\"../utils/iosFix\");\n\nvar _ieFix = require(\"../utils/ieFix\");\n\nvar _aria = require(\"../utils/aria\");\n\nvar _index = require(\"../utils/dom/index\");\n\nvar dom = _interopRequireWildcard(_index);\n\nvar _classes = require(\"../utils/classes.js\");\n\nvar _globalState = require(\"../globalState\");\n\nvar _globalState2 = _interopRequireDefault(_globalState);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/*\n * Global function to close sweetAlert\n */\nconst close = (onClose, onAfterClose) => {\n  const container = dom.getContainer();\n  const popup = dom.getPopup();\n  if (!popup) {\n    return;\n  }\n\n  if (onClose !== null && typeof onClose === 'function') {\n    onClose(popup);\n  }\n\n  dom.removeClass(popup, _classes.swalClasses.show);\n  dom.addClass(popup, _classes.swalClasses.hide);\n\n  const removePopupAndResetState = () => {\n    if (!dom.isToast()) {\n      (0, _globalState.restoreActiveElement)().then(() => triggerOnAfterClose(onAfterClose));\n      _globalState2.default.keydownTarget.removeEventListener('keydown', _globalState2.default.keydownHandler, { capture: _globalState2.default.keydownListenerCapture });\n      _globalState2.default.keydownHandlerAdded = false;\n    } else {\n      triggerOnAfterClose(onAfterClose);\n    }\n\n    if (container.parentNode) {\n      container.parentNode.removeChild(container);\n    }\n    dom.removeClass([document.documentElement, document.body], [_classes.swalClasses.shown, _classes.swalClasses['height-auto'], _classes.swalClasses['no-backdrop'], _classes.swalClasses['toast-shown'], _classes.swalClasses['toast-column']]);\n\n    if (dom.isModal()) {\n      (0, _scrollbarFix.undoScrollbar)();\n      (0, _iosFix.undoIOSfix)();\n      (0, _ieFix.undoIEfix)();\n      (0, _aria.unsetAriaHidden)();\n    }\n  };\n\n  // If animation is supported, animate\n  if (dom.animationEndEvent && !dom.hasClass(popup, _classes.swalClasses.noanimation)) {\n    popup.addEventListener(dom.animationEndEvent, function swalCloseEventFinished() {\n      popup.removeEventListener(dom.animationEndEvent, swalCloseEventFinished);\n      if (dom.hasClass(popup, _classes.swalClasses.hide)) {\n        removePopupAndResetState();\n      }\n    });\n  } else {\n    // Otherwise, remove immediately\n    removePopupAndResetState();\n  }\n};\n\nconst triggerOnAfterClose = onAfterClose => {\n  if (onAfterClose !== null && typeof onAfterClose === 'function') {\n    setTimeout(() => {\n      onAfterClose();\n    });\n  }\n};\n\nexports.close = close;\nexports.closePopup = close;\nexports.closeModal = close;\nexports.closeToast = close;"},"hash":"90c98e1239cbeb2f007ff4686bf4dc86"}
{"dependencies":[{"name":"../utils/utils","loc":{"line":1,"column":31}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.showWarningsForParams = exports.isDeprecatedParameter = exports.isValidParameter = exports.deprecatedParams = undefined;\n\nvar _utils = require(\"../utils/utils\");\n\nconst defaultParams = {\n  title: '',\n  titleText: '',\n  text: '',\n  html: '',\n  footer: '',\n  type: null,\n  toast: false,\n  customClass: '',\n  target: 'body',\n  backdrop: true,\n  animation: true,\n  heightAuto: true,\n  allowOutsideClick: true,\n  allowEscapeKey: true,\n  allowEnterKey: true,\n  stopKeydownPropagation: true,\n  keydownListenerCapture: false,\n  showConfirmButton: true,\n  showCancelButton: false,\n  preConfirm: null,\n  confirmButtonText: 'OK',\n  confirmButtonAriaLabel: '',\n  confirmButtonColor: null,\n  confirmButtonClass: null,\n  cancelButtonText: 'Cancel',\n  cancelButtonAriaLabel: '',\n  cancelButtonColor: null,\n  cancelButtonClass: null,\n  buttonsStyling: true,\n  reverseButtons: false,\n  focusConfirm: true,\n  focusCancel: false,\n  showCloseButton: false,\n  closeButtonAriaLabel: 'Close this dialog',\n  showLoaderOnConfirm: false,\n  imageUrl: null,\n  imageWidth: null,\n  imageHeight: null,\n  imageAlt: '',\n  imageClass: null,\n  timer: null,\n  width: null,\n  padding: null,\n  background: null,\n  input: null,\n  inputPlaceholder: '',\n  inputValue: '',\n  inputOptions: {},\n  inputAutoTrim: true,\n  inputClass: null,\n  inputAttributes: {},\n  inputValidator: null,\n  validationMessage: null,\n  grow: false,\n  position: 'center',\n  progressSteps: [],\n  currentProgressStep: null,\n  progressStepsDistance: null,\n  onBeforeOpen: null,\n  onAfterClose: null,\n  onOpen: null,\n  onClose: null,\n  useRejections: false,\n  expectRejections: false\n};\n\nconst deprecatedParams = exports.deprecatedParams = ['useRejections', 'expectRejections', 'extraParams'];\n\nconst toastIncompatibleParams = ['allowOutsideClick', 'allowEnterKey', 'backdrop', 'focusConfirm', 'focusCancel', 'heightAuto', 'keydownListenerCapture'];\n\n/**\n * Is valid parameter\n * @param {String} paramName\n */\nconst isValidParameter = exports.isValidParameter = paramName => {\n  return defaultParams.hasOwnProperty(paramName) || paramName === 'extraParams';\n};\n\n/**\n * Is deprecated parameter\n * @param {String} paramName\n */\nconst isDeprecatedParameter = exports.isDeprecatedParameter = paramName => {\n  return deprecatedParams.includes(paramName);\n};\n\n/**\n * Show relevant warnings for given params\n *\n * @param params\n */\nconst showWarningsForParams = exports.showWarningsForParams = params => {\n  for (const param in params) {\n    if (!isValidParameter(param)) {\n      (0, _utils.warn)(`Unknown parameter \"${param}\"`);\n    }\n    if (params.toast && toastIncompatibleParams.includes(param)) {\n      (0, _utils.warn)(`The parameter \"${param}\" is incompatible with toasts`);\n    }\n    if (isDeprecatedParameter(param)) {\n      (0, _utils.warnOnce)(`The parameter \"${param}\" is deprecated and will be removed in the next major release.`);\n    }\n  }\n};\n\nexports.default = defaultParams;"},"hash":"bd88703ce0591eba1ec4a9493bc06a4a"}
{"dependencies":[{"name":"./utils/WeakMap","loc":{"line":11,"column":20}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _WeakMap = require(\"./utils/WeakMap\");\n\nvar _WeakMap2 = _interopRequireDefault(_WeakMap);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n  promise: new _WeakMap2.default(),\n  innerParams: new _WeakMap2.default(),\n  domCache: new _WeakMap2.default()\n}; /**\n    * This module containts `WeakMap`s for each effectively-\"private  property\" that a `swal` has.\n    * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n    * This is the approach that Babel will probably take to implement private methods/fields\n    *   https://github.com/tc39/proposal-private-methods\n    *   https://github.com/babel/babel/pull/7555\n    * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n    *   then we can use that language feature.\n    */"},"hash":"72e846b94ce84f071edb231ed3323445"}
{"dependencies":[{"name":"../classes","loc":{"line":1,"column":28}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isVisible = exports.hide = exports.show = exports.getChildByClass = exports.removeClass = exports.addClass = exports.focusInput = exports.hasClass = exports.states = undefined;\n\nvar _classes = require(\"../classes\");\n\n// Remember state in cases where opening and handling a modal will fiddle with it.\nconst states = exports.states = {\n  previousBodyPadding: null\n};\n\nconst hasClass = exports.hasClass = (elem, className) => {\n  return elem.classList.contains(className);\n};\n\nconst focusInput = exports.focusInput = input => {\n  input.focus();\n\n  // place cursor at end of text in text input\n  if (input.type !== 'file') {\n    // http://stackoverflow.com/a/2345915\n    const val = input.value;\n    input.value = '';\n    input.value = val;\n  }\n};\n\nconst addOrRemoveClass = (target, classList, add) => {\n  if (!target || !classList) {\n    return;\n  }\n  if (typeof classList === 'string') {\n    classList = classList.split(/\\s+/).filter(Boolean);\n  }\n  classList.forEach(className => {\n    if (target.forEach) {\n      target.forEach(elem => {\n        add ? elem.classList.add(className) : elem.classList.remove(className);\n      });\n    } else {\n      add ? target.classList.add(className) : target.classList.remove(className);\n    }\n  });\n};\n\nconst addClass = exports.addClass = (target, classList) => {\n  addOrRemoveClass(target, classList, true);\n};\n\nconst removeClass = exports.removeClass = (target, classList) => {\n  addOrRemoveClass(target, classList, false);\n};\n\nconst getChildByClass = exports.getChildByClass = (elem, className) => {\n  for (let i = 0; i < elem.childNodes.length; i++) {\n    if (hasClass(elem.childNodes[i], className)) {\n      return elem.childNodes[i];\n    }\n  }\n};\n\nconst show = exports.show = elem => {\n  elem.style.opacity = '';\n  elem.style.display = elem.id === _classes.swalClasses.content ? 'block' : 'flex';\n};\n\nconst hide = exports.hide = elem => {\n  elem.style.opacity = '';\n  elem.style.display = 'none';\n};\n\n// borrowed from jquery $(elem).is(':visible') implementation\nconst isVisible = exports.isVisible = elem => elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);"},"hash":"a9b7a42c07472c0985e9d2c26d1aee06"}
{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// private global state for the queue feature\nlet currentSteps = [];\n\n/*\n * Global function for chaining sweetAlert popups\n */\nconst queue = exports.queue = function (steps) {\n  const swal = this;\n  currentSteps = steps;\n  const resetQueue = () => {\n    currentSteps = [];\n    document.body.removeAttribute('data-swal2-queue-step');\n  };\n  let queueResult = [];\n  return new Promise(resolve => {\n    (function step(i, callback) {\n      if (i < currentSteps.length) {\n        document.body.setAttribute('data-swal2-queue-step', i);\n\n        swal(currentSteps[i]).then(result => {\n          if (typeof result.value !== 'undefined') {\n            queueResult.push(result.value);\n            step(i + 1, callback);\n          } else {\n            resetQueue();\n            resolve({ dismiss: result.dismiss });\n          }\n        });\n      } else {\n        resetQueue();\n        resolve({ value: queueResult });\n      }\n    })(0);\n  });\n};\n\n/*\n * Global function for getting the index of current popup in queue\n */\nconst getQueueStep = exports.getQueueStep = () => document.body.getAttribute('data-swal2-queue-step');\n\n/*\n * Global function for inserting a popup to the queue\n */\nconst insertQueueStep = exports.insertQueueStep = (step, index) => {\n  if (index && index < currentSteps.length) {\n    return currentSteps.splice(index, 0, step);\n  }\n  return currentSteps.push(step);\n};\n\n/*\n * Global function for deleting a popup from the queue\n */\nconst deleteQueueStep = exports.deleteQueueStep = index => {\n  if (typeof currentSteps[index] !== 'undefined') {\n    currentSteps.splice(index, 1);\n  }\n};"},"hash":"ed75479118f539b5ef5c19b34f38a99a"}
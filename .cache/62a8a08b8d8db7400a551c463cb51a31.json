{"dependencies":[],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst consolePrefix = exports.consolePrefix = 'SweetAlert2:';\n\n/**\n * Filter the unique values into a new array\n * @param arr\n */\nconst uniqueArray = exports.uniqueArray = arr => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Convert NodeList to Array\n * @param nodeList\n */\nconst toArray = exports.toArray = nodeList => Array.prototype.slice.call(nodeList);\n\n/**\n* Converts `inputOptions` into an array of `[value, label]`s\n* @param inputOptions\n*/\nconst formatInputOptions = exports.formatInputOptions = inputOptions => {\n  const result = [];\n  if (typeof Map !== 'undefined' && inputOptions instanceof Map) {\n    inputOptions.forEach((value, key) => {\n      result.push([key, value]);\n    });\n  } else {\n    Object.keys(inputOptions).forEach(key => {\n      result.push([key, inputOptions[key]]);\n    });\n  }\n  return result;\n};\n\n/**\n * Standardise console warnings\n * @param message\n */\nconst warn = exports.warn = message => {\n  console.warn(`${consolePrefix} ${message}`);\n};\n\n/**\n * Standardise console errors\n * @param message\n */\nconst error = exports.error = message => {\n  console.error(`${consolePrefix} ${message}`);\n};\n\n/**\n * Private global state for `warnOnce`\n * @type {Array}\n * @private\n */\nconst previousWarnOnceMessages = [];\n\n/**\n * Show a console warning, but only if it hasn't already been shown\n * @param message\n */\nconst warnOnce = exports.warnOnce = message => {\n  if (!previousWarnOnceMessages.includes(message)) {\n    previousWarnOnceMessages.push(message);\n    warn(message);\n  }\n};\n\n/**\n * If `arg` is a function, call it (with no arguments or context) and return the result.\n * Otherwise, just pass the value through\n * @param arg\n */\nconst callIfFunction = exports.callIfFunction = arg => typeof arg === 'function' ? arg() : arg;\n\nconst isThenable = exports.isThenable = arg => arg && typeof arg === 'object' && typeof arg.then === 'function';"},"hash":"d0b755d4e885480e5bbe008e575fdfa6"}
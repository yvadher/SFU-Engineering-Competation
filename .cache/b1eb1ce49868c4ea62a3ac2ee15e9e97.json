{"dependencies":[{"name":"../classes","loc":{"line":1,"column":39}},{"name":"./getters","loc":{"line":2,"column":51}},{"name":"./domUtils","loc":{"line":3,"column":45}},{"name":"../isNodeEnv","loc":{"line":4,"column":26}},{"name":"../utils","loc":{"line":5,"column":22}},{"name":"../../sweetalert2","loc":{"line":6,"column":23}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.init = undefined;\n\nvar _classes = require(\"../classes\");\n\nvar _getters = require(\"./getters\");\n\nvar _domUtils = require(\"./domUtils\");\n\nvar _isNodeEnv = require(\"../isNodeEnv\");\n\nvar _utils = require(\"../utils\");\n\nvar _sweetalert = require(\"../../sweetalert2\");\n\nvar _sweetalert2 = _interopRequireDefault(_sweetalert);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst sweetHTML = `\n <div aria-labelledby=\"${_classes.swalClasses.title}\" aria-describedby=\"${_classes.swalClasses.content}\" class=\"${_classes.swalClasses.popup}\" tabindex=\"-1\">\n   <div class=\"${_classes.swalClasses.header}\">\n     <ul class=\"${_classes.swalClasses.progresssteps}\"></ul>\n     <div class=\"${_classes.swalClasses.icon} ${_classes.iconTypes.error}\">\n       <span class=\"swal2-x-mark\"><span class=\"swal2-x-mark-line-left\"></span><span class=\"swal2-x-mark-line-right\"></span></span>\n     </div>\n     <div class=\"${_classes.swalClasses.icon} ${_classes.iconTypes.question}\">\n       <span class=\"${_classes.swalClasses['icon-text']}\">?</span>\n      </div>\n     <div class=\"${_classes.swalClasses.icon} ${_classes.iconTypes.warning}\">\n       <span class=\"${_classes.swalClasses['icon-text']}\">!</span>\n      </div>\n     <div class=\"${_classes.swalClasses.icon} ${_classes.iconTypes.info}\">\n       <span class=\"${_classes.swalClasses['icon-text']}\">i</span>\n      </div>\n     <div class=\"${_classes.swalClasses.icon} ${_classes.iconTypes.success}\">\n       <div class=\"swal2-success-circular-line-left\"></div>\n       <span class=\"swal2-success-line-tip\"></span> <span class=\"swal2-success-line-long\"></span>\n       <div class=\"swal2-success-ring\"></div> <div class=\"swal2-success-fix\"></div>\n       <div class=\"swal2-success-circular-line-right\"></div>\n     </div>\n     <img class=\"${_classes.swalClasses.image}\" />\n     <h2 class=\"${_classes.swalClasses.title}\" id=\"${_classes.swalClasses.title}\"></h2>\n     <button type=\"button\" class=\"${_classes.swalClasses.close}\">Ã—</button>\n   </div>\n   <div class=\"${_classes.swalClasses.content}\">\n     <div id=\"${_classes.swalClasses.content}\"></div>\n     <input class=\"${_classes.swalClasses.input}\" />\n     <input type=\"file\" class=\"${_classes.swalClasses.file}\" />\n     <div class=\"${_classes.swalClasses.range}\">\n       <input type=\"range\" />\n       <output></output>\n     </div>\n     <select class=\"${_classes.swalClasses.select}\"></select>\n     <div class=\"${_classes.swalClasses.radio}\"></div>\n     <label for=\"${_classes.swalClasses.checkbox}\" class=\"${_classes.swalClasses.checkbox}\">\n       <input type=\"checkbox\" />\n       <span class=\"${_classes.swalClasses.label}\"></span>\n     </label>\n     <textarea class=\"${_classes.swalClasses.textarea}\"></textarea>\n     <div class=\"${_classes.swalClasses['validation-message']}\" id=\"${_classes.swalClasses['validation-message']}\"></div>\n   </div>\n   <div class=\"${_classes.swalClasses.actions}\">\n     <button type=\"button\" class=\"${_classes.swalClasses.confirm}\">OK</button>\n     <button type=\"button\" class=\"${_classes.swalClasses.cancel}\">Cancel</button>\n   </div>\n   <div class=\"${_classes.swalClasses.footer}\">\n   </div>\n </div>\n`.replace(/(^|\\n)\\s*/g, '');\n\n/*\n * Add modal + backdrop to DOM\n */\nconst init = exports.init = params => {\n  // Clean up the old popup if it exists\n  const c = (0, _getters.getContainer)();\n  if (c) {\n    c.parentNode.removeChild(c);\n    (0, _domUtils.removeClass)([document.documentElement, document.body], [_classes.swalClasses['no-backdrop'], _classes.swalClasses['toast-shown'], _classes.swalClasses['has-column']]);\n  }\n\n  /* istanbul ignore if */\n  if ((0, _isNodeEnv.isNodeEnv)()) {\n    (0, _utils.error)('SweetAlert2 requires document to initialize');\n    return;\n  }\n\n  const container = document.createElement('div');\n  container.className = _classes.swalClasses.container;\n  container.innerHTML = sweetHTML;\n\n  let targetElement = typeof params.target === 'string' ? document.querySelector(params.target) : params.target;\n  targetElement.appendChild(container);\n\n  const popup = (0, _getters.getPopup)();\n  const content = (0, _getters.getContent)();\n  const input = (0, _domUtils.getChildByClass)(content, _classes.swalClasses.input);\n  const file = (0, _domUtils.getChildByClass)(content, _classes.swalClasses.file);\n  const range = content.querySelector(`.${_classes.swalClasses.range} input`);\n  const rangeOutput = content.querySelector(`.${_classes.swalClasses.range} output`);\n  const select = (0, _domUtils.getChildByClass)(content, _classes.swalClasses.select);\n  const checkbox = content.querySelector(`.${_classes.swalClasses.checkbox} input`);\n  const textarea = (0, _domUtils.getChildByClass)(content, _classes.swalClasses.textarea);\n\n  // a11y\n  popup.setAttribute('role', params.toast ? 'alert' : 'dialog');\n  popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');\n  if (!params.toast) {\n    popup.setAttribute('aria-modal', 'true');\n  }\n\n  let oldInputVal; // IE11 workaround, see #1109 for details\n  const resetValidationMessage = e => {\n    if (_sweetalert2.default.isVisible() && oldInputVal !== e.target.value) {\n      _sweetalert2.default.resetValidationMessage();\n    }\n    oldInputVal = e.target.value;\n  };\n\n  input.oninput = resetValidationMessage;\n  file.onchange = resetValidationMessage;\n  select.onchange = resetValidationMessage;\n  checkbox.onchange = resetValidationMessage;\n  textarea.oninput = resetValidationMessage;\n\n  range.oninput = e => {\n    resetValidationMessage(e);\n    rangeOutput.value = range.value;\n  };\n\n  range.onchange = e => {\n    resetValidationMessage(e);\n    range.nextSibling.value = range.value;\n  };\n\n  return popup;\n};"},"hash":"20b4c4693e5064716a40d6b3ecdf2f0f"}
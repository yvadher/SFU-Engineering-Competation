{"dependencies":[{"name":"./dom/getters","loc":{"line":1,"column":29}},{"name":"./utils","loc":{"line":2,"column":24}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unsetAriaHidden = exports.setAriaHidden = undefined;\n\nvar _getters = require(\"./dom/getters\");\n\nvar _utils = require(\"./utils\");\n\n// From https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n// Adding aria-hidden=\"true\" to elements outside of the active modal dialog ensures that\n// elements not within the active modal dialog will not be surfaced if a user opens a screen\n// readerâ€™s list of elements (headings, form controls, landmarks, etc.) in the document.\n\nconst setAriaHidden = exports.setAriaHidden = () => {\n  const bodyChildren = (0, _utils.toArray)(document.body.children);\n  bodyChildren.forEach(el => {\n    if (el === (0, _getters.getContainer)() || el.contains((0, _getters.getContainer)())) {\n      return;\n    }\n\n    if (el.hasAttribute('aria-hidden')) {\n      el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden'));\n    }\n    el.setAttribute('aria-hidden', 'true');\n  });\n};\n\nconst unsetAriaHidden = exports.unsetAriaHidden = () => {\n  const bodyChildren = (0, _utils.toArray)(document.body.children);\n  bodyChildren.forEach(el => {\n    if (el.hasAttribute('data-previous-aria-hidden')) {\n      el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden'));\n      el.removeAttribute('data-previous-aria-hidden');\n    } else {\n      el.removeAttribute('aria-hidden');\n    }\n  });\n};"},"hash":"b0b10c0714fe428b89ead162b71fb6c1"}
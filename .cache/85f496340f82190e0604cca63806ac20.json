{"dependencies":[{"name":"../utils/utils","loc":{"line":1,"column":25}},{"name":"../utils/params","loc":{"line":2,"column":38}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withGlobalDefaults = withGlobalDefaults;\n\nvar _utils = require(\"../utils/utils\");\n\nvar _params = require(\"../utils/params\");\n\nconst deprecationWarning = `\\\n\"setDefaults\" & \"resetDefaults\" methods are deprecated in favor of \"mixin\" method and will be removed in the next major release. \\\nFor new projects, use \"mixin\". For past projects already using \"setDefaults\", support will be provided through an additional package.`;\nlet defaults = {};\n\nfunction withGlobalDefaults(ParentSwal) {\n  class SwalWithGlobalDefaults extends ParentSwal {\n    _main(params) {\n      return super._main(Object.assign({}, defaults, params));\n    }\n\n    static setDefaults(params) {\n      (0, _utils.warnOnce)(deprecationWarning);\n      if (!params || typeof params !== 'object') {\n        throw new TypeError('SweetAlert2: The argument for setDefaults() is required and has to be a object');\n      }\n      (0, _params.showWarningsForParams)(params);\n      // assign valid params from `params` to `defaults`\n      Object.keys(params).forEach(param => {\n        if (ParentSwal.isValidParameter(param)) {\n          defaults[param] = params[param];\n        }\n      });\n    }\n\n    static resetDefaults() {\n      (0, _utils.warnOnce)(deprecationWarning);\n      defaults = {};\n    }\n  }\n\n  // Set default params if `window._swalDefaults` is an object\n  if (typeof window !== 'undefined' && typeof window._swalDefaults === 'object') {\n    SwalWithGlobalDefaults.setDefaults(window._swalDefaults);\n  }\n\n  return SwalWithGlobalDefaults;\n}"},"hash":"0627366233006e426629783da7c29b5f"}